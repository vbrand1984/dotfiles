-- vim: ft=lua fdm=marker
-- chezmoi:template: left-delimiter=@'{# right-delimiter=#}'@

--== CONKY.CONFIG ==--

-- Palette initialization {{{

-- Loading palettes
dofile(@'{# joinPath .chezmoi.homeDir ".config/conky/conky-palettes.lua" | quote #}'@)

local current_palette = @'{# .conkyPalette | squote #}'@

-- }}}
-- conky.config {{{ 

local celsius_sign = utf8.char(0x2103)

conky.config = {

    update_interval         = 4,
    --== Font setting ==--
    font                    = 'DejaVu Sans:bold:size=10',

    --== Outputs ==--
    out_to_console          = false,
    out_to_stderr           = false,
    out_to_x                = true,
@'{# if not .sysIsGentoo -#}'@
    out_to_wayland          = false,
@'{#- end #}'@

    --== Base window properties ==--
    own_window              = true,
    own_window_type         = 'desktop',
    own_window_class        = 'normal',
    own_window_hints        = 'undecorated,below,sticky,skip_taskbar,skip_pager',

    --== Window geometry ==--
    alignment               = 'tr',
    gap_x                   = 20,
    gap_y                   = 45,
    border_width            = 0,
    border_inner_margin     = 10,
    maximum_width           = 350,
    minimum_width           = 350,
    minimum_height          = 600,
    -- Most of our bars will be of default width and height
    default_bar_height      = 10,
    default_bar_width       = 300,
    
    --== Various settings ==--
    background              = false,
    cpu_avg_samples         = 2,
    net_avg_samples         = 2,
    draw_borders            = true,
    draw_outline            = true,
    draw_shades             = true,
    use_xft                 = true,
    no_buffers              = true,
    extra_newline           = false,
    short_units             = true,
    stippled_borders        = 0,
    double_buffer           = true,

    --== COLOURS ==--
    default_outline_color   = 'black',
    default_shade_color     = 'black',
    color1                  = conky_palettes[current_palette]['headers'],
    color2                  = conky_palettes[current_palette]['captions'],
    color3                  = conky_palettes[current_palette]['text'],
    color4                  = conky_palettes[current_palette]['temperatures'],
    color5                  = conky_palettes[current_palette]['progressbars'],

    --== TEMPLATES ==--

    --== Headers of the sections ==--
    -- Parameter 1: Name of the section
    template0 = [[${color1}\1 ${hr 3}]],

    --== Info string: caption tag to the left and lightgray inscription to the right ==--
    -- Parameter 1: Tag to the left (caption color)
    -- Parameter 2: Inscription to be displayed to the right
    template1 = [[${color2}\1${alignr}${color3}\2]],

    --== Information on the cpu cores ==--
    -- Parameter 1: # of the CPU for conky command {cpu} (starting from 1)
    -- Parameter 2: # of the CPU core to be displayed (starting from 0)
    template2 = [[${color2}\\#\2${goto 50}${color3}${cpu cpu\1}% ${goto 95}${color5}${cpubar cpu\1 10,185}${alignr}${color3}${freq \1} MHz]],

    --== Processes table header (no parameters) ==--
    template3 = [[${color2}Name${goto 180}PID${goto 245}CPU%${alignr}MEM%]],

    --== Processes table entry ==--
    -- Parameter 1: # of the entry in the top list
    template4 = [[${color3}${top name \1}${goto \160}${top pid \1}${goto 240}${top cpu \1}${alignr}${top mem \1}]],

    --== Memory or swap info entry ==--
    -- Parameter 1: Caption of the entry
    -- Parameter 2: conky command to execute and display results (mem or swap)
    template5 = [[${color2}\1${alignr}${color3}${\2} / ${\2max}\n${color3}$\2perc% ${alignr}${color5}${\2bar}]],

    --== Disk usage info entry ==--
    -- Parameter 1: Caption of the entry
    -- Parameter 2: Mountpoint of the volume
    template6 = [[${color2}\1 ${alignr}${color3}${fs_used \2} / ${fs_size \2}\n${color3}${fs_used_perc \2}%${alignr}${color5}${fs_bar \2}]],

    --== Disk temperature info ==--
    -- Parameter 1: Caption
    -- Parameter 2: Command to execute and receive a number of degree
    template7 = [[${color2}\1${alignr}${color4}${\2}]] .. celsius_sign,

@'{# if or .sysIsDesktopRig .sysIsOldLaptop -#}'@
    --== Temperature info in two columns ==--
    -- Parameter 1: Left column caption
    -- Parameter 2: command to execute for the left column
    -- Parameter 3: Right column caption
    -- Parameter 4: command to execute for the right column
    template8 = [[${color2}\1${goto @'{# if .sysIsDesktopRig -#}'@ 150 @'{#- else -#}'@ 115 @'{#- end #}'@}${color4}${\2}]] .. celsius_sign .. [[${goto 220}${color2}\3${alignr}${color4}${\4}]] .. celsius_sign,

@'{# if .sysIsDesktopRig -#}'@
    --== Fan info in two columns ==--
    -- Parameter 1: Left column caption
    -- Parameter 2: hwmon subdirectory number for the left column
    -- Parameter 3: hwmon fan number for the left column
    -- Parameter 4: Right column caption
    -- Parameter 5: hwmon subdirectory number for the right column
    -- Parameter 6: hwmon fan number for the right column
    template9 = [[${color2}\1${goto 140}${color3}${hwmon \2 fan \3}${goto 210}${color2}\4 ${color3}${alignr}${if_match ${hwmon \5 fan \6} > 0}${hwmon \5 fan \6}${else}Off${endif}]],
@'{#- else -#}'@
    --== Weather widget (old) ==--
    template9 = [[${color2}\1 ${alignr}${color3}${execi\ 300\ /bin/sh -e @'{# joinPath .dirLocalScripts "conky-weather-simple.sh" | quote #}'@\ \2}]],
@'{#- end #}'@
@'{#- end #}'@

};

-- }}}
-- {{{ Transparency settings

@'{# if eq .conkyTransparency "Full" -#}'@
-- Full transparency
conky.config['own_window_transparent']  = true
conky.config['own_window_argb_visual']  = false
conky.config['border_width']            = 0
@'{#- else if eq .conkyTransparency "Semi" -#}'@
-- Semi-transparent conky
conky.config['own_window_transparent']  = false
conky.config['own_window_argb_visual']  = true
conky.config['own_window_argb_value']   = @'{# int .conkyArgbValue #}'@
conky.config['border_width']            = 1
conky.config['own_window_colour']       = conky_palettes[current_palette]['background']
conky.config['default_color']           = conky_palettes[current_palette]['border']
@'{#- else -#}'@
-- Non-transparent conky
conky.config['own_window_transparent']  = false
conky.config['own_window_argb_visual']  = false
--conky.config['own_window_argb_value']   = conky_argb_value
conky.config['border_width']            = 1
conky.config['own_window_colour']       = conky_palettes[current_palette]['background']
conky.config['default_color']           = conky_palettes[current_palette]['border']
@'{#- end #}'@

-- Now we can delete this
conky_palettes = nil

-- }}}

--== FUNCTIONS ==--

-- {{{ Common functions: file and shell operations

-- Reads a string from a file. One string only!
local function read_from_file(path_to_file)
    local f = io.open(path_to_file, 'r')
    local the_data = f:read() or ''
    f:close()
    the_data = string.gsub(the_data, '\n$', '')
    return the_data
end -- function read_from_file()

-- Returns the first string of a shell command output. The first string only!
local function get_cmd_output(the_cmd)
    local f = io.popen(the_cmd)
    local the_data = f:read() or ''
    f:close()
    the_data = string.gsub(the_data, '\n$', '')
    return the_data
end -- function get_cmd_output()

-- }}}
-- {{{ Common functions for conky.text

-- Returns the text block for system info
local function display_system_info()
    local distro_id = get_cmd_output('lsb_release --id --short 2>/dev/null')
    distro_id = string.upper(distro_id)
    return [[${template0 SYSTEM\ INFO\ (]] .. distro_id .. [[)}
${template1 Hodie ${time\ %a\ %d\ %b\ %Y}}
${template1 Kernel\ Version ${kernel}}
${template1 Uptime ${uptime}}
]];
end

-- Returns the table of CPU cores usage
local function display_cpu_usage()
    local ncores = tonumber(get_cmd_output('nproc'))
    local output_string = '${template0 CPU}\n'

    for i = 1, ncores, 1 do
        output_string = output_string .. '${template2 ' .. tostring(i) .. ' ' .. tostring(i - 1) .. '}\n'
    end

    return output_string
end

-- Returns the table of the <top_number> top processes
local function display_top_processes(top_number)
    local output_string = '${template0 TOP\\ PROCESSES}\n${template3}\n'
    for i = 1, top_number, 1 do
        output_string = output_string .. '${template4 ' .. i .. '}\n'
    end
    return output_string
end

-- Returns the block for memory usage
local function display_memory_usage()
    -- RAM usage
    local output_string = "${template0 MEMORY\\ USAGE}\n${template5 RAM mem}\n"
    -- Check if we have a swap. If so, add swap info to the output string.
    local swaps = get_cmd_output("cat /proc/swaps | wc -l")
    if tonumber(swaps) > 1 then
        output_string = output_string .. "${template5 Swap swap}\n"
    end
    return output_string
end

-- Returns the block for disk usage
local function display_storage()
    local output_string = "${template0 STORAGE}\n${template6 System\\ Volume /}\n"
    -- Check if @'{# .dirUserData | squote #}'@ is mounted separately
    local res = get_cmd_output("findmnt --noheadings @'{# .dirUserData | squote #}'@ | wc -l")
    if tonumber(res) > 0 then
        output_string = output_string .. "${template6 Data\\ Volume @'{# .dirUserData #}'@}\n"
    end
    return output_string
end

-- }}}
@'{# if or .sysIsDesktopRig .sysIsOldLaptop -#}'@
-- {{{ Machine-specific functions

-- Our main weapon. Populates the work_table with actual hwmon module names, labels and numbers
-- Format of the output: work_table[<module_name>][#] - a table for a certain hwmon module called <module_name>,
-- like drivetemp, amdgpu or k10temp. These names are stored in files like /sys/class/hwmon/hwmonN/name. 
-- We read these names from there. By default, it's only one element is stored there (i.e. #=1), 
-- but in case of, e.g., having two or more drives, you'll have several 'drivetemp' modules in /sys/class/hwmon, 
-- so that it'll be work_table['drivetemp'][1] and work_table['drivetemp'][2] for different drives.
-- Then, hwmod_table[<module_name>][#]['nbr'] is a number N in the path /sys/class/hwmon/hwmonN for that module;
-- hwmod_table[<module_name>][#]['lbl'][<label_name>] stores a number M for certain temerature label,
-- which can be found in files like /sys/class/hwmon/hwmonN/tempM_label
-- So that we can call conky function ${hwmon N M} in order to get value of a certain temperature sensor.
-- This table is populated on startup by executing the populate_work_table() function (see below)
-- Certain values of N and M depend on kernel configuration and module loading sequence, that's why
-- it's inconvenient to hardcode these values into conky.conf.
-- Thus we calculate these numbers dynamically and address sensors by their module names and lables instead.

local function populate_hwmon_table()
    local work_table = {}

    for hwmon_n in io.popen('ls /sys/class/hwmon 2>/dev/null'):lines() do
        local hw_name = read_from_file('/sys/class/hwmon/' .. hwmon_n .. '/name')

        if work_table[hw_name] == nil then
            work_table[hw_name] = {}
        end
        local das_array = {}
        local current_dir = '/sys/class/hwmon/' .. hwmon_n
        das_array['nbr'] = string.gsub(hwmon_n, '[%D]', '')

        for label_file in io.popen('find ' .. current_dir .. '/ -type f -name "temp*_label" -printf "%f\\n" 2>/dev/null'):lines() do
            if das_array['lbl'] == nil then
                das_array['lbl'] = {}
            end
            local das_index = string.gsub(label_file, '[%D]', '')
            local label_name = read_from_file(current_dir .. '/' .. label_file)
            das_array['lbl'][label_name] = das_index
        end -- for label_file in ...
        table.insert(work_table[hw_name], das_array)
    end -- for hwmon_n in ...

    return work_table
end -- function populate_hwmon_table()

-- }}}
-- {{{ Machine-specific initialization: let's populate!

-- Let's call our precious function
local hwmon_table = populate_hwmon_table()

-- }}}
@'{# if .sysIsDesktopRig -#}'@
-- {{{ Initialization of internal variables: Desktop Rig

local t_mobo            = hwmon_table['nct6798'][1]
local t_gpu             = hwmon_table['amdgpu'][1]
local t_cpu             = hwmon_table['k10temp'][1]
local t_wifi            = hwmon_table['iwlwifi_1'][1]
local t_drivetemp       = hwmon_table['drivetemp'][1]

local mod_mobo          = t_mobo['nbr']
local mod_gpu           = t_gpu['nbr']
local mod_cpu           = t_cpu['nbr']
local mod_wifi          = t_wifi['nbr']
local mod_drivetemp     = t_drivetemp['nbr']

local nr_SMBUSMASTER_0  = t_mobo['lbl']['SMBUSMASTER 0']
local nr_CPUTIN         = t_mobo['lbl']['CPUTIN']
local nr_SYSTIN         = t_mobo['lbl']['SYSTIN']
local nr_Tccd1          = t_cpu['lbl']['Tccd1']
local nr_junction       = t_gpu['lbl']['junction']
local nr_mem            = t_gpu['lbl']['mem']

-- }}}
@'{#- else if .sysIsOldLaptop -#}'@
-- {{{ Initialization of internal variables: Old Laptop

local t_mobo    = hwmon_table['dell_smm'][1]
local t_cpu     = hwmon_table['coretemp'][1]
local t_ssd     = hwmon_table['drivetemp'][1]
local t_hdd     = hwmon_table['drivetemp'][2]

local mod_mobo  = t_mobo['nbr']
local mod_cpu   = t_cpu['nbr']
local mod_ssd   = t_ssd['nbr']
local mod_hdd   = t_hdd['nbr']

local nr_Core0  = t_cpu['lbl']['Core 0']
local nr_Core1  = t_cpu['lbl']['Core 1']
local nr_Other  = t_mobo['lbl']['Other']
local nr_Memory = t_mobo['lbl']['SODIMM']
local nr_GPU    = t_mobo['lbl']['GPU']

-- }}}
@'{#- end #}'@
@'{#- end #}'@

--== CONKY.TEXT ==--

@'{# if .sysIsDesktopRig -#}'@
-- {{{ conky.text for Desktop Rig

conky.text = display_system_info() .. [[

]] .. display_cpu_usage() .. [[

${template0 TEMPERATURES}
${template8 SMBUSMASTER\ 0 hwmon\ ]] .. mod_mobo .. [[\ temp\ ]] .. nr_SMBUSMASTER_0 .. [[ CPU\ (Tccd1) hwmon\ ]] .. mod_cpu .. [[\ temp\ ]] .. nr_Tccd1 .. [[}
${template8 SYSTIN hwmon\ ]] .. mod_mobo .. [[\ temp\ ]] .. nr_SYSTIN .. [[ Videocard hwmon\ ]] .. mod_gpu .. [[\ temp\ ]] .. nr_junction .. [[}
${template8 CPUTIN hwmon\ ]] .. mod_mobo .. [[\ temp\ ]] .. nr_CPUTIN .. [[ Wifi\ Adapter hwmon\ ]] .. mod_wifi .. [[\ temp\ 1}

${template0 FANS\ (RPM)}
${template9 CPU\ Fan\ Rear ]] .. mod_mobo .. [[ 2 CPU\ Fan\ Front ]] .. mod_mobo .. [[ 3}
${template9 Bottom\ Rear ]] .. mod_mobo .. [[ 5 Bottom\ Front ]] .. mod_mobo .. [[ 1}
${template9 Front\ Top ]] .. mod_mobo .. [[ 6 Front\ Bottom ]] .. mod_mobo .. [[ 7}
${template9 Rear ]] .. mod_mobo .. [[ 4 GPU\ Fans ]] .. mod_gpu .. [[ 1}

]] .. display_top_processes(6) .. [[

]] .. display_memory_usage() .. [[

]] .. display_storage() .. [[
${template8 NVMe\ Temp. hwmon\ nvme\ temp\ 1 HDD\ Temp. hwmon\ ]] .. mod_drivetemp .. [[\ temp\ 1}

${execpi 900 /usr/bin/python3 -- @'{# joinPath .dirLocalScripts "conky-weather-advanced.py" -#}'@ } @'{#- if not .sysIsVoid -#}'@ ${voffset -10} @'{#- end #}'@]];

-- }}}
@'{#- else if .sysIsOldLaptop -#}'@
-- {{{ conky.text for Old Laptop

conky.text = display_system_info() .. [[

]] .. display_cpu_usage() .. [[

]] .. display_top_processes(5) .. [[

${template0 TEMPERATURES}
${template8 Core\ 0 hwmon\ ]] .. mod_cpu .. [[\ temp\ ]] .. nr_Core0 .. [[ Core\ 1 hwmon\ ]] .. mod_cpu .. [[\ temp\ ]] .. nr_Core1 .. [[}
${color2}GPU${goto 115}${if_match "${hwmon ]] .. mod_mobo .. [[ temp ]] .. nr_GPU .. [[}" == "2"}${color3}Off${else}${color4}${hwmon ]] .. mod_mobo .. [[ temp ]] .. nr_GPU .. [[}°C${endif}${goto 220}${color2}Other${alignr}${color4}${hwmon ]] .. mod_mobo .. [[ temp ]] .. nr_Other .. [[}°C
${color2}Fan${goto 115}${color3}${hwmon ]] .. mod_mobo .. [[ fan 1} RPM${goto 220}${color2}Memory${alignr}${color4}${hwmon ]] .. mod_mobo .. [[ temp ]] .. nr_Memory .. [[}°C

]] .. display_memory_usage() .. [[

]] .. display_storage() .. [[
${template8 SSD\ Temp. hwmon\ ]] .. mod_ssd .. [[\ temp\ 1 HDD\ Temp. hwmon\ ]] .. mod_hdd .. [[\ temp\ 1}

${template0 WEATHER}
${template9 St. Petersburg ASI\\|RU\\|RS073\\|SAINTPETERSBURG\\|}
${template9 Moscow ASI\\|RU\\|RS052\\|MOSCOW\\|}]];

-- }}}
@'{#- else -#}'@
-- {{{ Generic conky.text for other machines

conky.text = display_system_info() .. [[

]] .. display_cpu_usage() .. [[

]] .. display_top_processes(5) .. [[

]] .. display_memory_usage() .. [[

]] .. display_storage();

-- }}}
@'{#- end #}'@
