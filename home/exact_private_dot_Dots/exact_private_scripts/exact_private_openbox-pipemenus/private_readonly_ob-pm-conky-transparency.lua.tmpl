#!/usr/bin/lua
-- chezmoi:template: left-delimiter={@' right-delimiter='@}
-- vim: ft=lua

{@'/* Template which adds the lookup_icon function and initializes Gtk */ -'@}
{@'- includeTemplate .templates.funcGtkLookupIcon . '@}

io.write("<openbox_pipe_menu>\n")

for _, variant in ipairs({'Full', 'Semi', 'None'}) do
    local icon_name, the_command, second_command

    if variant == {@' .conkyTransparency | squote '@} then
        the_command = "notify-send 'Current conky transparency: {@' .conkyTransparency '@}'"
        second_command = ''
        icon_name = " icon='" .. lookup_icon(Gtk, gtk_icon_theme, 'emblem-ok-symbolic', {@' .miscObmenuIconSize '@}) .. "'"
    else
        the_command = "/usr/bin/python3 {@' .dirLocalScripts '@}/tinker-chezmoi-config.py 'data.conkyTransparency' '" .. variant .. "' 'doapply'"
        second_command = "notify-send \"Changing conky's transparency to " .. variant .. "\" 'Please wait a little bit...' "
        icon_name = ''
    end

    io.write("<item label='", variant, "'", icon_name, [[>
    <action name='Execute'>
        <execute><command><![CDATA[]], the_command, ']]', [[></command></execute>
    </action>
]]);

    if second_command ~= '' then
        io.write([[    <action name='Execute'>
        <execute><command><![CDATA[]], second_command, ']]', [[></command></execute>
    </action>
]]);
    end

    io.write("</item>\n")
end

{@' if eq .conkyTransparency "Semi" -'@}
io.write("<separator />\n<menu id='vbd_conky_argb_values_sub_menu' label='ARGB values' execute='/usr/bin/lua -- {@' .dirObPipemenus '@}/ob-pm-conky-argb-values.lua' icon='", lookup_icon(Gtk, gtk_icon_theme, 'applications-graphics-symbolic', {@' .miscObmenuIconSize '@}), "' />\n")

{@' end -'@}

io.write("</openbox_pipe_menu>\n")
