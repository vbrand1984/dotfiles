#!/usr/bin/lua
-- chezmoi:template: left-delimiter={@' right-delimiter='@}
-- vim: ft=lua

{@'/* Template which adds the lookup_icon function and initializes Gtk */ -'@}
{@'- includeTemplate .tmpl.lua.funcGtkLookupIcon . '@}

io.write("<openbox_pipe_menu>\n")

for argb_value = 120, 240, 10 do
    local icon_name, the_command, second_command

    if argb_value == {@' .conky.argbValue '@} then
        the_command = "{@' .cmd.notifier '@} 'Current conky ARGB value: {@' .conky.argbValue '@}'"
        second_command = ''
        icon_name = " icon='" .. lookup_icon(Gtk, gtk_icon_theme, 'emblem-ok-symbolic', {@' .misc.obmenuIconSize '@}) .. "'"
    else
        the_command=[[{@' .cmd.tinkerChezmoiConfig '@} 'data.conky.argbValue' ']] ..
            tostring(argb_value) .. "' 'doapply'"
        second_command = "{@' .cmd.notifier '@} \"Changing conky's ARGB value to " .. tostring(argb_value) .. "\" 'Please wait a little bit...' "
        icon_name=''
    end    

    io.write("<item label='", tostring(argb_value), "'", icon_name, [[>
    <action name='Execute'>
        <execute><command><![CDATA[]], the_command, ']]', [[></command></execute>
    </action>
]]);

    if second_command ~= '' then
        io.write([[    <action name='Execute'>
        <execute><command><![CDATA[]], second_command, ']]', [[></command></execute>
    </action>
]]);
    end

    io.write("</item>\n");
end

io.write("</openbox_pipe_menu>\n")
