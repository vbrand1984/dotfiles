# vim: ft=python
#
{{ includeTemplate .templates.msgManagedByChezmoi . | comment "# " }}
#

import shutil
from tempfile import NamedTemporaryFile
from subprocess import run
from sys import argv
from tomlkit import parse
from tomlkit import dumps
from tomlkit.exceptions import UnexpectedCharError
from tomlkit.exceptions import NonExistentKey

# The chezmoi config file must be in toml format obviously
config_file = {{ .chezmoi.configFile | quote }} 

# Parsing command line arguments
nargs = len(argv)

if nargs < 3 or nargs > 4:
    print("Wrong number of parameters!")
    exit(1)

the_key = argv[1]
new_value = argv[2]
do_apply = (nargs == 4) and (argv[3] == 'doapply')

# Safety net: list of the keys that are allowed to be changed via this script
allowed_keys = ('data.gtkThemeName', 'data.conkyArgbValue', 'data.conkyPalette', 'data.conkyTransparency')

if not the_key in allowed_keys:
    print("The key '" + the_key + "' is not allowed to be changed via this script!")
    exit(2)


try:
    with open(config_file, "rt") as f:
        file_data = f.read()
        data = parse(file_data)

except (FileNotFoundError):
    print("File '" + config_file + "' not found!")
    exit(1)
except (PermissionError):
    print("Have no permission to open the file '" + config_file + "'!")
    exit(1)
except (UnexpectedCharError):
    print("Your toml file '" + config_file + "' seems to be damaged!")
    exit(1)

param_list = the_key.split('.')

try:
    # Now we iterate through the keys into the depth
    i = 0
    current_key = param_list[0]
    current_data = data

    while i < len(param_list)-1:
        current_data = current_data[current_key]
        i += 1
        current_key = param_list[i] 

    # Changing of the value appears to be here!
    current_data[current_key] = new_value

except (NonExistentKey):
    print("The key '" + the_key + "' doesn't exist in the file '" + config_file + "'!")
    exit(1)
    
# Now save the modified data into a temporary file and replace the config file with it
with NamedTemporaryFile() as tmp:
    s = dumps(data)
    tmp.write(s.encode())

    # Make a backup copy of the config file
    shutil.move(config_file, config_file + ".orig")

    # We need to copy the tempfile, not to move it,
    # otherwise it wouldn't be properly closed afterwards.
    shutil.copyfile(tmp.name, config_file)

if do_apply:
    run(['env', 'CHEZMOI_IGNORE_ALL_OF_THE_EXTERNALS=1', 'chezmoi', 'apply', '--force', '--exclude=encrypted,scripts'])

